# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'

- script: pip install pipenv
  displayName: 'Install pipenv'

- script: pipenv install --dev
  displayName: 'Install dependencies'

- script: pipenv run pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
  displayName: 'Run unittests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- task: Docker@2
  inputs:
    containerRegistry: 'DockerHub'
    command: 'login'

- task: Docker@2
  inputs:
    containerRegistry: 'DockerHub'
    repository: 'battleforcastile-match-recorder'
    command: 'build'
    Dockerfile: '**/Dockerfile'

- task: Docker@2
  inputs:
    containerRegistry: 'DockerHub'
    repository: 'battleforcastile-match-recorder'
    command: 'push'